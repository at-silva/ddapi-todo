var crypto = require('crypto');
const fs = require('fs');
const path = require('path');

async function* walk(dir) {
    for await (const d of await fs.promises.opendir(dir)) {
        const entry = path.join(dir, d.name);
        if (d.isDirectory()) {
            yield* walk(entry)
        } else if (d.isFile()) {
            yield entry;
        }
    }
}

function parseQuery(match) {
    try {
        let query = match.replace(/^[^{]*/g, "")
            .replace(/[^}]*$/g, "");
        query = `(${query})`;
        return eval(query);
    } catch (error) {
        console.warn("potentially invalid query found:", match);
    }
}

function getHash(value) {
    //TODO: parameterize 
    if (process.env.DDAPI_TODO_SECRET === "") {
        console.error("[DDAPI] DDAPI_TODO_SECRET is not set")
        return
    }
    let hmac = crypto.createHmac('sha256', process.env.DDAPI_TODO_SECRET);
    let data = hmac.update(value);
    return data.digest('base64');
}

// TODO: refactor into a node module
async function run() {
    //TODO: improve to reduce false positives
    let pattern = /[(=]\s*\{[\s\S]*?DDAPIID[\s\S]*?;/gm
    let match;
    let signatures = {};

    //TODO: parameterize the path
    for await (const filePath of walk('src/')) {
        //TODO: refactor to remove the hardcoded file names
        if (filePath.endsWith('sign.js') || filePath.endsWith('ddapi/index.js')) {
            continue;
        }

        const fileContent = fs.readFileSync(filePath);
        let query;
        while ((match = pattern.exec(fileContent)) !== null) {
            console.info(`[DDAPI] query found at ${filePath}`);
            if ((query = parseQuery(match[0]))) {
                console.info(`[DDAPI] calculating hash for ${query.DDAPIID}`);
                signatures[`${query.DDAPIID}_sql`] = getHash(query.sql);
                signatures[`${query.DDAPIID}_params_schema`] = getHash(JSON.stringify(query.paramsSchema));
            }
        }
    }

    let signaturesContent = `// DO NOT EDIT THIS FILE: this is an auto-generate file
export const DDAPI_SIGNATURES = {`
    for (const key in signatures) {
        signaturesContent += `\n\t"${key}": "${signatures[key]}",`;
    }
    signaturesContent += "\n};";

    // TODO: parameterize
    fs.writeFileSync('src/ddapi/signatures.js', signaturesContent);

    console.info('[DDAPI] pronto!');
}


run();