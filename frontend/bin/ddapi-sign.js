const crypto = require('crypto');
const fs = require('fs');
const path = require('path');
const { Parser } = require("acorn");
const walk = require("acorn-walk");
const jsx = require("acorn-jsx");
const { extend } = require("acorn-jsx-walk");

function getQueries(fileContent, filePath) {
    const myParser = Parser.extend(jsx());
    extend(walk.base);

    const ast = myParser.parse(fileContent, {
        //TODO: parameterize
        sourceType: "module",
        ecmaVersion: 2020
    });
    const queries = [];

    try {
        walk.simple(ast, {
            ObjectExpression(node) {
                const [ddapiIdProp] = node.properties.filter(p => p.key && p.key.name && p.key.name === 'DDAPIID');
                if (!ddapiIdProp) {
                    return
                }
                const [sqlProp] = node.properties.filter(p => p.key.name === 'sql');
                const [paramsSchemaProp] = node.properties.filter(p => p.key.name === 'paramsSchema');

                if (!sqlProp || !paramsSchemaProp) {
                    console.warn(`[DDAPI] found DDAPIID property but couldn't find 'sql' or 'paramsSchema' properties at ${filePath}`);
                    return
                }

                queries.push([
                    fileContent.substring(ddapiIdProp.start, ddapiIdProp.end),
                    fileContent.substring(sqlProp.start, sqlProp.end),
                    fileContent.substring(paramsSchemaProp.start, paramsSchemaProp.end)
                ]);
            }
        })
    } catch (error) {
        console.error(error);
    }

    return queries;
}

async function* walkDir(dir) {
    for await (const d of await fs.promises.opendir(dir)) {
        const entry = path.join(dir, d.name);
        if (d.isDirectory()) {
            yield* walkDir(entry)
        } else if (d.isFile()) {
            yield entry;
        }
    }
}

function getHash(value) {
    //TODO: parameterize 
    if (process.env.DDAPI_TODO_SECRET === "") {
        console.error("[DDAPI] DDAPI_TODO_SECRET is not set")
        return
    }
    //TODO: parameterize
    let hmac = crypto.createHmac('sha256', process.env.DDAPI_TODO_SECRET);
    let data = hmac.update(value);
    return data.digest('base64');
}

function patchParamsSchema(paramsSchema) {
    const required = [];
    for (const prop in paramsSchema) {
        required.push(prop);
    }
    return {
        type: "object",
        required,
        properties: {
            ...paramsSchema,
        }
    }
}

// TODO: refactor into a npm module
async function run() {
    let signatures = {};
    let paths = {};

    //TODO: parameterize the path
    for await (const filePath of walkDir('src/')) {
        //TODO: refactor to remove the hardcoded file name
        if (filePath.endsWith('ddapi-sign.js')) {
            continue;
        }

        const fileContent = fs.readFileSync(filePath).toString();
        if (fileContent.includes("DDAPIID")) {
            for (const query of getQueries(fileContent, filePath)) {
                const [ddapiIdText, sqlText, paramsSchemaText] = query;
                const ddapiId = eval(`({${ddapiIdText}})`).DDAPIID;
                console.info(`[DDAPI] calculating hash for ${ddapiId}`);

                const sql = eval(`({${sqlText}})`).sql;
                signatures[`${ddapiId}_sql`] = getHash(sql);
                paths[`${ddapiId}_sql`] = filePath;

                let paramsSchema = eval(`({${paramsSchemaText}})`).paramsSchema;
                paramsSchema = patchParamsSchema(paramsSchema);
                signatures[`${ddapiId}_params_schema`] = getHash(JSON.stringify(paramsSchema));
                paths[`${ddapiId}_params_schema`] = filePath;
            }
        }
    }

    let signaturesContent = `// DO NOT EDIT THIS FILE: this is an auto-generate file
export const DDAPI_SIGNATURES = {`
    let path;
    for (const key in signatures) {
        if (paths[key] !== path) {
            path = paths[key];
            signaturesContent += `\n\t// ${path}`
        }
        signaturesContent += `\n\t"${key}": "${signatures[key]}",`;
    }
    signaturesContent += "\n};";

    // TODO: parameterize
    fs.writeFileSync('src/ddapi/signatures.js', signaturesContent);

    console.info('[DDAPI] pronto!');
}


run();